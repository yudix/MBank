package db.managers;

import helpers.DepositType;
import helpers.MBankException;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import beans.Deposit;

public class DepositManagerJDBC implements DepositManager {

	private Connection connection;

	public DepositManagerJDBC(Connection connection) {
		this.connection = connection;
	}

	@Override
	public Deposit addDeposit(Deposit deposit) throws MBankException {
		String sql = "INSERT INTO `mbank`.`deposits` (`client_id`, `balance`, `type`, `estimated_balance`, `opening_date`, `closing_date`) VALUES (?, ?, ?, ?, ?, ?);";

		try (PreparedStatement pstmt = connection.prepareStatement(sql,
				Statement.RETURN_GENERATED_KEYS)) {
			pstmt.setLong(1, deposit.getClientID());
			pstmt.setDouble(2, deposit.getBalance());
			pstmt.setString(3, deposit.getDepositType().toString());
			pstmt.setDouble(4, deposit.getEstimatedBalance());
			pstmt.setTimestamp(5, new java.sql.Timestamp(deposit
					.getOpeningDate().getTime()));
			pstmt.setTimestamp(6, new java.sql.Timestamp(deposit
					.getClosingDate().getTime()));
			pstmt.executeUpdate();

			ResultSet id = pstmt.getGeneratedKeys();
			id.next();
			int autoGeneratedID = id.getInt(1);
			deposit.setDepositID(autoGeneratedID);

			return deposit;
		} catch (SQLException e) {
			throw new MBankException(e.getMessage());
		}
	}

	@Override
	public void removeDeposit(long depositID) throws MBankException {
		String sql = "DELETE FROM `mbank`.`deposits` WHERE `deposit_id`=?;";

		try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
			pstmt.setLong(1, depositID);
			pstmt.executeUpdate();
			pstmt.closeOnCompletion();

		} catch (SQLException e) {
			throw new MBankException(e.getMessage());
		}

	}

	@Override
	public Deposit viewDeposit(long deposit_id) throws MBankException {
		String sql = "SELECT * FROM `mbank`.`deposits` WHERE `deposit_id`=?;";
		try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
			pstmt.setLong(1, deposit_id);
			ResultSet resultset = pstmt.executeQuery();
			pstmt.closeOnCompletion();

			Deposit deposit = null;
		
			while (resultset.next()) {
				deposit = new Deposit(resultset.getLong("deposit_id"),
						resultset.getLong("client_id"),
						resultset.getDouble("balance"),
						DepositType.valueOf(resultset.getString("type")),
						resultset.getLong("estimated_balance"),
						resultset.getDate("opening_date"),
						resultset.getDate("closing_date"));
				return deposit;
			}
		} catch (SQLException e) {
			throw new MBankException(e.getMessage());
		}
		throw new MBankException("No Deposits found for deposit id: "+deposit_id);
	}

	@Override
	public List<Deposit> viewCilentDeposits(long clientID)
			throws MBankException {
		String sql = "SELECT * FROM `mbank`.`deposits` WHERE `client_id`=?;";
		List<Deposit> deposits = new ArrayList<>();

		try (PreparedStatement pstmt = connection.prepareStatement(sql);) {
			pstmt.setLong(1, clientID);
			ResultSet resultset = pstmt.executeQuery();
			pstmt.closeOnCompletion();
			
			while (resultset.next()) {
				deposits.add(new Deposit(resultset.getLong("deposit_id"),
						resultset.getLong("client_id"), resultset
								.getDouble("balance"), DepositType
								.valueOf(resultset.getString("type")),
						resultset.getLong("estimated_balance"), resultset
								.getDate("opening_date"), resultset
								.getDate("closing_date")));
			}
			return deposits;
		} catch (SQLException e) {
			throw new MBankException(e.getMessage());
		}
	}

	@Override
	public List<Deposit> viewAllDeposits() throws MBankException {
		String sql = "SELECT * FROM `mbank`.`deposits`";
		List<Deposit> deposits = new ArrayList<>();

		try (Statement statement = connection.createStatement()) {
			ResultSet resultset = statement.executeQuery(sql);
			while (resultset.next()) {
				deposits.add(new Deposit(resultset.getLong("deposit_id"),
						resultset.getLong("client_id"), resultset
								.getDouble("balance"), DepositType
								.valueOf(resultset.getString("type")),
						resultset.getLong("estimated_balance"), resultset
								.getDate("opening_date"), resultset
								.getDate("closing_date")));
			}
			return deposits;
		} catch (SQLException e) {
			throw new MBankException(e.getMessage());
		}
	}

	@Override
	public Deposit viewDeposit(long clientID, long deposit_id)
			throws MBankException {
		String sql = "select * from mbank.deposits where client_id = ? and deposit_id = ? ";
		try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
			pstmt.setLong(1, clientID);
			pstmt.setLong(2, deposit_id);
			ResultSet resultset = pstmt.executeQuery();
			pstmt.closeOnCompletion();

			Deposit deposit = null;

			while (resultset.next()) {
				deposit = new Deposit(resultset.getLong("deposit_id"),
						resultset.getLong("client_id"),
						resultset.getDouble("balance"),
						DepositType.valueOf(resultset.getString("type")),
						resultset.getLong("estimated_balance"),
						resultset.getDate("opening_date"),
						resultset.getDate("closing_date"));
				return deposit;
			}
		} catch (SQLException e) {
			throw new MBankException(e.getMessage());
		}
		throw new MBankException("No Deposits found for client number "+clientID+", and deposit id: "
				+ deposit_id);
	}

}
